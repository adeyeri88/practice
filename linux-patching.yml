---
##playbook to Patch Linux redhat 6, 7, 8, and Centos 6, 7, 8.
##Make sure you incomment all lines under vars and under tasks if patching redhat systems
- name: Patch and reboot servers
  hosts: "{{ hosts_inventory }}"
  become: yes
  vars:
    yum_name: "*"
    yum_state:  latest
#    yum_enablerepo: "rhel-?-server-rpms,rhel-?-server-satellite-tools-6.?-rpms"
#    yum_disablerepo: "*"
    yum_exclude: ""
    dnf_name: "*"
    dnf_state: latest
#    dnf_enablerepo: "rhel-8-for-x86_64-appstream-rpms,rhel-8-for-x86_64-baseos-rpms,satellite-tools-6.?-for-rhel-8-x86_64-rpms"
#    dnf_disablerepo: "*"
    dnf_exclude: ""
  tasks:
# this task will clean all yum cache on a system
    - name: clean up the repos
      shell: yum clean all
      args:
        warn: no
# this task will will reload all repos
    - name: repolist the repos
      shell: yum repolist all
      args:
        warn: False

    - name: upgrade packages via yum
      yum:
        name="{{ yum_name }}"
        state="{{ yum_state }}"
#        disablerepo={{ yum_disablerepo }}
#        enablerepo={{ yum_enablerepo }}
        exclude="{{ yum_exclude }}"
      register: yumcommandout
      when:
        - (ansible_facts['os_family'] == "RedHat" and ansible_facts['distribution_major_version'] == "6") or
          (ansible_facts['os_family'] == "RedHat" and ansible_facts['distribution_major_version'] == "7")

    - name: Print errors if yum failed
      debug:
        msg: "yum command produced errors"
      when: yumcommandout is not defined

    - name: upgrade packages via dnf
      dnf:
        name="{{ dnf_name }}"
        state="{{ dnf_state }}"
#        disablerepo={{ dnf_disablerepo }}
#        enablerepo={{ dnf_enablerepo }}
        exclude="{{ dnf_exclude }}"
      register: dnfcommandout
      when:
        - (ansible_facts['os_family'] == "RedHat" and ansible_facts['distribution_major_version'] == "8")

    - name: Print errors if dnf failed
      debug:
        msg: "dnf command produced errors"
      when: dnfcommandout is not defined

  #  - name: check to see if we need a reboot
  #    command: needs-restarting -r
  #    register: result
  #    ignore_errors: yes

    - name: Check for reboot hint.
      shell: LAST_KERNEL=$(rpm -q --last kernel | awk 'NR==1{sub(/kernel-/,""); print $1}'); CURRENT_KERNEL=$(uname -r); if [ $LAST_KERNEL != $CURRENT_KERNEL ]; then echo 'reboot'; else echo 'no'; fi
      changed_when: false
      register: yum_reboot_hint_result
      when: ansible_os_family == "RedHat"

    - name: set the fact for reboot
      set_fact:
        reboot_hint_result: false
      when: ansible_os_family == "RedHat" and reboot_default | bool and yum_reboot_hint_result.stdout.find("no") != -1

    - name: set the fact for reboot
      set_fact:
        reboot_hint_result: true
      when: ansible_os_family == "RedHat" and reboot_default | bool and yum_reboot_hint_result.stdout.find("reboot") != -1

    - name: Reboot Server if Necessary
      reboot:
        pre_reboot_delay: 0
        post_reboot_delay: 10
        reboot_timeout: 600
      when: reboot_default | bool and reboot_hint_result | bool
    #  when: reboot_hint.stdout.find("reboot") != -1
    #  when: result.rc == 1

    # This pause is mandatory, otherwise the existing control connection
    #- name: Pausing to allow server to shutdown and terminate our SSH connection
    #  pause: seconds=30
    #  when: reboot_default | bool and reboot_hint_result | bool
  #    when: result.rc == 1

    - name: Wait for reboot to complete and SSH to become available
      local_action: wait_for host={{ inventory_hostname }} port=22
        state=started delay=30 timeout=600
      retries: 30
      delay: 10
      when: reboot_default | bool and reboot_hint_result | bool
  #    when: reboot_hint.stdout.find("reboot") != -1
  #    when: result.rc == 1
